package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"net"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	pb "github.com/hi20160616/hfcms-articles/api/articles/v1"
	"github.com/hi20160616/hfcms-articles/internal/service"
	"google.golang.org/grpc"
)

var (
	port    = flag.Int("port", 50051, "The server port")
	restful = flag.Int("restful", 8080, "the port to restful serve on")
)

func main() {
	ctx := context.Background()
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()
	flag.Parse()
	lis, err := net.Listen("tcp", fmt.Sprintf("localhost:%d", *port))
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.RegisterArticlesAPIServer(s, service.NewArticleService().UnimplementedArticlesAPIServer)
	log.Printf("server listening at %v", lis.Addr())
	// if err := s.Serve(lis); err != nil {
	//         log.Fatalf("failed to serve: %v", err)
	// }
	go func() {
		if err := s.Serve(lis); err != nil {
			log.Fatalf("failed to serve: %v", err)
		}
	}()

	conn, err := grpc.Dial(
		":50051",
		grpc.WithInsecure(),
	)
	if err != nil {
		log.Fatal(err)
	}
	gwmux := runtime.NewServeMux()
	err = pb.RegisterArticlesAPIHandler(context.Background(), gwmux, conn)
	if err != nil {
		log.Fatal(err)
	}
	gwServer := &http.Server{
		Addr:    fmt.Sprintf(":%d", *restful),
		Handler: gwmux,
	}
	log.Println("Serving gRPC-Gateway on http://0.0.0.0" + fmt.Sprintf(":%d", *restful))
	log.Fatalln(gwServer.ListenAndServe())
	// opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
}
