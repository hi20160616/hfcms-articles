// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AttributesAPIClient is the client API for AttributesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttributesAPIClient interface {
	ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*ListAttributesResponse, error)
	GetAttribute(ctx context.Context, in *GetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error)
	SearchAttributes(ctx context.Context, in *SearchAttributesRequest, opts ...grpc.CallOption) (*SearchAttributesResponse, error)
	CreateAttribute(ctx context.Context, in *CreateAttributeRequest, opts ...grpc.CallOption) (*Attribute, error)
	UpdateAttribute(ctx context.Context, in *UpdateAttributeRequest, opts ...grpc.CallOption) (*Attribute, error)
	DeleteAttribute(ctx context.Context, in *DeleteAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type attributesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAttributesAPIClient(cc grpc.ClientConnInterface) AttributesAPIClient {
	return &attributesAPIClient{cc}
}

func (c *attributesAPIClient) ListAttributes(ctx context.Context, in *ListAttributesRequest, opts ...grpc.CallOption) (*ListAttributesResponse, error) {
	out := new(ListAttributesResponse)
	err := c.cc.Invoke(ctx, "/hfcms.articles.v1.AttributesAPI/ListAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributesAPIClient) GetAttribute(ctx context.Context, in *GetAttributeRequest, opts ...grpc.CallOption) (*Attribute, error) {
	out := new(Attribute)
	err := c.cc.Invoke(ctx, "/hfcms.articles.v1.AttributesAPI/GetAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributesAPIClient) SearchAttributes(ctx context.Context, in *SearchAttributesRequest, opts ...grpc.CallOption) (*SearchAttributesResponse, error) {
	out := new(SearchAttributesResponse)
	err := c.cc.Invoke(ctx, "/hfcms.articles.v1.AttributesAPI/SearchAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributesAPIClient) CreateAttribute(ctx context.Context, in *CreateAttributeRequest, opts ...grpc.CallOption) (*Attribute, error) {
	out := new(Attribute)
	err := c.cc.Invoke(ctx, "/hfcms.articles.v1.AttributesAPI/CreateAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributesAPIClient) UpdateAttribute(ctx context.Context, in *UpdateAttributeRequest, opts ...grpc.CallOption) (*Attribute, error) {
	out := new(Attribute)
	err := c.cc.Invoke(ctx, "/hfcms.articles.v1.AttributesAPI/UpdateAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributesAPIClient) DeleteAttribute(ctx context.Context, in *DeleteAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hfcms.articles.v1.AttributesAPI/DeleteAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttributesAPIServer is the server API for AttributesAPI service.
// All implementations must embed UnimplementedAttributesAPIServer
// for forward compatibility
type AttributesAPIServer interface {
	ListAttributes(context.Context, *ListAttributesRequest) (*ListAttributesResponse, error)
	GetAttribute(context.Context, *GetAttributeRequest) (*Attribute, error)
	SearchAttributes(context.Context, *SearchAttributesRequest) (*SearchAttributesResponse, error)
	CreateAttribute(context.Context, *CreateAttributeRequest) (*Attribute, error)
	UpdateAttribute(context.Context, *UpdateAttributeRequest) (*Attribute, error)
	DeleteAttribute(context.Context, *DeleteAttributeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAttributesAPIServer()
}

// UnimplementedAttributesAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAttributesAPIServer struct {
}

func (UnimplementedAttributesAPIServer) ListAttributes(context.Context, *ListAttributesRequest) (*ListAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributes not implemented")
}
func (UnimplementedAttributesAPIServer) GetAttribute(context.Context, *GetAttributeRequest) (*Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttribute not implemented")
}
func (UnimplementedAttributesAPIServer) SearchAttributes(context.Context, *SearchAttributesRequest) (*SearchAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAttributes not implemented")
}
func (UnimplementedAttributesAPIServer) CreateAttribute(context.Context, *CreateAttributeRequest) (*Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttribute not implemented")
}
func (UnimplementedAttributesAPIServer) UpdateAttribute(context.Context, *UpdateAttributeRequest) (*Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttribute not implemented")
}
func (UnimplementedAttributesAPIServer) DeleteAttribute(context.Context, *DeleteAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttribute not implemented")
}
func (UnimplementedAttributesAPIServer) mustEmbedUnimplementedAttributesAPIServer() {}

// UnsafeAttributesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttributesAPIServer will
// result in compilation errors.
type UnsafeAttributesAPIServer interface {
	mustEmbedUnimplementedAttributesAPIServer()
}

func RegisterAttributesAPIServer(s *grpc.Server, srv AttributesAPIServer) {
	s.RegisterService(&_AttributesAPI_serviceDesc, srv)
}

func _AttributesAPI_ListAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributesAPIServer).ListAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.articles.v1.AttributesAPI/ListAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributesAPIServer).ListAttributes(ctx, req.(*ListAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributesAPI_GetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributesAPIServer).GetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.articles.v1.AttributesAPI/GetAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributesAPIServer).GetAttribute(ctx, req.(*GetAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributesAPI_SearchAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributesAPIServer).SearchAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.articles.v1.AttributesAPI/SearchAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributesAPIServer).SearchAttributes(ctx, req.(*SearchAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributesAPI_CreateAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributesAPIServer).CreateAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.articles.v1.AttributesAPI/CreateAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributesAPIServer).CreateAttribute(ctx, req.(*CreateAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributesAPI_UpdateAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributesAPIServer).UpdateAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.articles.v1.AttributesAPI/UpdateAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributesAPIServer).UpdateAttribute(ctx, req.(*UpdateAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributesAPI_DeleteAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributesAPIServer).DeleteAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.articles.v1.AttributesAPI/DeleteAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributesAPIServer).DeleteAttribute(ctx, req.(*DeleteAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttributesAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hfcms.articles.v1.AttributesAPI",
	HandlerType: (*AttributesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAttributes",
			Handler:    _AttributesAPI_ListAttributes_Handler,
		},
		{
			MethodName: "GetAttribute",
			Handler:    _AttributesAPI_GetAttribute_Handler,
		},
		{
			MethodName: "SearchAttributes",
			Handler:    _AttributesAPI_SearchAttributes_Handler,
		},
		{
			MethodName: "CreateAttribute",
			Handler:    _AttributesAPI_CreateAttribute_Handler,
		},
		{
			MethodName: "UpdateAttribute",
			Handler:    _AttributesAPI_UpdateAttribute_Handler,
		},
		{
			MethodName: "DeleteAttribute",
			Handler:    _AttributesAPI_DeleteAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/articles/v1/hfcms-attributes.proto",
}
